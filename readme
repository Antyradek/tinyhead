 _____ _             _   _                _ 
|_   _(_)_ __  _   _| | | | ___  __ _  __| |
  | | | | '_ \| | | | |_| |/ _ \/ _` |/ _` |
  | | | | | | | |_| |  _  |  __/ (_| | (_| |
  |_| |_|_| |_|\__, |_| |_|\___|\__,_|\__,_|
               |___/                        

Embed specified file in header to be included in compiled executable.
Works like "xxd -i" but tries to create smaller file by omitting spaces and hex digits.
Consult manual "man ./manual".

Examples:
$ th -f my_kitty_photo.png > kitty.h
	Generates header file with variables fileData and fileDataSize.
	
$ th < my_kitty_photo.png > kitty.h
$ cat my_kitty_photo.png | th > kitty.h
	Reads data from STDIN.
	
$ th -v kitty -f my_kitty_photo.png > kitty.h
	Generates header file with kittyData and kittyDataSize.
	
$ th -s -v kitty -f my_kitty_photo.png > kitty.h
	Generates header, but uses snake_case for variables, that is kitty_data and kitty_data_size.
	
Refer to manual and "th --help" for more info.

Compile it with make. You can then move it to your ~/bin and add to PATH.

Program encodes bytes to ascii and bloats file size roughtly 3 times.
This depends of the file, as 0x00 takes one character (0) and 0xff takes three (255).

Compared to xxd, TinyHead is twice as effective (and a little faster).