.\" TinyHead manual
.TH TH 1 "August 2017" "version 1.3.0"

.SH NAME 
th \- embed any file in C/C++ header

.SH SYNOPSIS 
.B th 
.RI "[" "OPTIONS" "]"

.SH DESCRIPTION
TinyHead
.RB ( th )
is a program to generate C/C++ style header, containing embedded binary data.
Generated header will have 
.I #pragma once
preprocessor command at the beginning, 
.I stddef.h
header inlusion, an array with file data and a length variable, together with their optional documentation comments.
File will not contain unnecessary newlines and spaces, making it unsuitable for edition by hand.
Useful to include in make scripts.

An array will be of 
.I const unsigned char
type.
The array size will be 
.I const size_t
type.

In 
.I PIPE
mode, program will read bytes, until 
.IR EOF .
In standard mode, data is read from file.
Both of them can be empty, resulting in array of the size of 0.

This is similar to 
.BR "xxd -i", 
but tries to minimalise size by omitting spaces and hex encoding, resulting in 60% smaller file.
Also gives control over variable name, case and comments.

See 
.B EXAMPLES
for generated files.

.SH OPTIONS
.TP
.BR \-v ", " \-\-variable = \fIVARNAME\fR
Set the prefix for generated variable. Default is
.IR file .
The suffix
.RI ' Data '
and 
.RI ' DataSize '
will be appended to this name.
The name may only contain alphanumeric characters and underscore.
Also, the
.B \-s
option changes the suffix.

.TP
.BR \-f ", " \-\-filename = \fIFILENAME\fR
Read contents from
.IR FILENAME ,
if this option is omitted, instead read from
.IR STDIN .

.TP
.BR \-s ", " \-\-snakecase
Use 
.IR snake_case , 
instead of 
.IR camelCase .
This will also change the suffix to
.RI ' _data '
and
.RI ' _data_size '.

.TP
.BR \-p ", " \-\-cplusplus
Use 
.I C++
header
.RI (' #include 
.IR <cstddef> ')
containing necessary 
.I size_t
definition. Default behaviour is to use 
.I C
style header
.RI (' #include 
.IR <stddef.h> ').

.TP
.BR \-D ", " \-\-data-comment = \fIDATACOMMENT\fR
Specify a documentation comment to be added above data array. 

.TP
.BR \-S ", " \-\-size-comment = \fISIZECOMMENT\fR
Specify a documentation comment to be added above size variable. 

.TP
.BR \-J ", " \-\-use-javadoc
The default behaviour is to use
.I C#
style documentation comments 
.RI (' /// ').
This switch changes it to use 
.I Java
style comments, also called 
.I javadoc 
.RI (' /** 
.I ...
.IR */ ').
If neither 
.BR \-\-data-comment ,
nor
.B \-\-size-comment 
are specified, this option is ignored.
For now, the comments can be one line only.

.TP
.BR \-\-help
Print usage info, generated by
.IR popt .

.TP
.BR \-\-version
Print version and exit.

.SH EXAMPLES
Assuming file
.RI ' barfile '
exist, which contains only three characters
.RI ' foo ',
without a new line.

Generate header with data from file.
.nf
.RS
.B $ th -f barfile
#pragma once
#include <stddef.h>
const size_t fileDataSize = 3;
const unsigned char fileData[] = {102,111,111};
.RE
.fi

Similar effect can be achieved by using program in 
.I PIPE
mode.
.nf
.RS
.B $ cat barfile | th
.B $ th < barfile
#pragma once
#include <stddef.h>
const unsigned char fileData[] = {102,111,111};
const size_t fileDataSize = 3;
.RE
.fi

Add comments, so that header can be parsed by documentation generating software. Remember about quotes.
.nf
.RS
.B $ th -f barfile -D 'Barfile data.' -S 'Barfile data size.'
#pragma once
#include <stddef.h>
/// Barfile data size.
const size_t fileDataSize = 3;
/// Barfile data.
const unsigned char fileData[] = {102,111,111};
.RE
.fi

Change a name of the generated variable, change included header to C++ style, change comment type to Javadoc.
We can specify only one comment.
.nf
.RS
.B $ th -f barfile -v myBinaryFile -p -D 'My binary file data.' -J
#pragma once
#include <cstddef>
const size_t myBinaryFileDataSize = 3;
/** My binary file data. */
const unsigned char myBinaryFileData[] = {102,111,111};
.RE
.fi

You can also switch to snake case to math your source code, remember to change argument prefix too.
.nf
.RS
.B $ th -f barfile -v my_binary_file -s
#pragma once
#include <stddef.h>
const size_t my_binary_file_data_size = 3;
const unsigned char my_binary_file_data[] = {102,111,111};
.RE
.fi

The file can be empty, all of those commands generate similar header.
.nf
.RS
.B $ th -f /dev/null
.B $ th < /dev/null
.B $ cat /dev/null | th
#pragma once
#include <stddef.h>
const size_t fileDataSize = 0;
const unsigned char fileData[] = {};
.RE
.fi

To generate actual header, simply reroute
.I STDOUT
to file.
.nf
.RS
.B $ th -f barfile > embedded.h
.RE
.fi


.SH SEE ALSO 
Similar 
.BR xxd (1) 
tool (bundled with 
.BR vim )
can generate headers too, but bases on filename, instead of arguments, creates unnecessary spaces and encodes as hex numbers, which always take three characters.

.SH VERSION
This manual describes 
.B 1.3
program version.

.SH BUGS
Please inform author about any bugs and feature requests.

.SH AUTHOR
(c) 2017 Radosław Świątkiewicz <antyradek@protonmail.com>

Under 
.I GPLv3
license.

