.TH TH 1 July\ 2017 version\ 1.2.0

.SH NAME 
th \- embed a binary file in C/C++ header file

.SH SYNOPSIS 
.B th 
.RI "[" "OPTIONS" "]"

.SH DESCRIPTION
TinyHead
.RB ( th )
is a program to generate C/C++ style header containing embedded binary data.
Generated header will contain 
.I #pragma once
preprocessor command, an array with data and a length variable.
File will not contain unnecessary newlines and spaces, making it unsuitable for edition by hand.
Useful to include in makefiles.

An array will be of 
.I const unsigned char
type.
The array size will be 
.I const size_t
type.

In 
.I PIPE
mode, program will read bytes, until 
.IR EOF .
In standard mode, data is read from file.
Both of them can be empty, resulting in array of the size of 0.

This is similar to 
.BR "xxd -i", 
but tries to minimalise size by omitting spaces and hex encoding, resulting in 60% smaller file.
Also gives control over variable name and case.

See 
.B EXAMPLES
for generated files.

.SH OPTIONS
.TP
.BR \-v ", " \-\-variable = \fIVARNAME\fR
Set the prefix for generated variable. Default is
.IR file .
The suffix
.I 'Data'
and 
.I 'DataSize'
will be appended to this name.
The name may only contain alphanumeric characters and underscore.
Also, the
.B \-s
option changes the suffix.

.TP
.BR \-f ", " \-\-filename = \fIFILENAME\fR
Read contents from
.IR FILENAME ,
if this option is omitted, instead read from
.IR STDIN .

.TP
.BR \-s ", " \-\-snakecase
Use 
.IR snake_case , 
instead of 
.IR camelCase .
This will also change the suffix to
.I '_data'
and
.IR '_data_size' .

.TP
.BR \-\-help
Print usage info, generated by
.IR popt .

.TP
.BR \-\-version
Print version and exit.

.SH EXAMPLES
Assuming file
.I 'barfile'
exist, which contains only three characters
.IR 'foo' ,
without a new line.

Generate header with data from file.
.nf
.RS
.I $ th -f barfile
#pragma once
const size_t fileDataSize = 3;
const unsigned char fileData[] = {102,111,111};
.RE
.fi

Similar effect can be achieved by using program in 
.I PIPE
mode.
.nf
.RS
.I $ cat barfile | th
.I $ th < barfile
#pragma once
const unsigned char fileData[] = {102,111,111};
const size_t fileDataSize = 3;
.RE
.fi

Change a name of the generated variable.
.nf
.RS
.I $ th -f barfile -v myBinaryFile
#pragma once
const size_t myBinaryFileDataSize = 3;
const unsigned char myBinaryFileData[] = {102,111,111};
.RE
.fi

You can also switch to snake case to math your source code, remember to change argument prefix too.
.nf
.RS
.I $ th -f barfile -v my_binary_file -s
#pragma once
const size_t my_binary_file_data_size = 3;
const unsigned char my_binary_file_data[] = {102,111,111};
.RE
.fi

The file can be empty, all of those commands generate similar header.
.nf
.RS
.I $ th -f /dev/null
.I $ th < /dev/null
.I $ cat /dev/null | th
#pragma once
const size_t fileDataSize = 0;
const unsigned char fileData[] = {};
.RE
.fi

To generate actual header, simply reroute
.I STDOUT
to file.
.nf
.RS
.I $ th -f barfile > embedded.h
.RE
.fi


.SH SEE ALSO 
Similar 
.BR xxd (1) 
tool, bundled with 
.B vim
can generate headers too, but bases on filename, instead of arguments, creates unnecessary spaces and encodes as hex numbers, which always take three characters.

.SH VERSION
This manual describes 
.B 1.2
program version.

.SH BUGS
Please inform author about any bugs and feature requests.

.SH AUTHOR
(c) 2017 Radosław Świątkiewicz <antyradek@protonmail.com>

Under 
.I GPLv3
license.

